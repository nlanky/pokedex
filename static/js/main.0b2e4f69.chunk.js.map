{"version":3,"sources":["utils/common.js","components/micLight/MicLight.js","components/sprite/Sprite.js","components/numberDisplay/NumberDisplay.js","components/typeDisplay/TypeDisplay.js","components/secondaryDisplay/SecondaryDisplay.js","components/directionalPad/directionalPad.js","components/indicatorLight/IndicatorLight.js","components/gridButton/GridButton.js","components/confirmButton/ConfirmButton.js","components/slimButton/SlimButton.js","components/vent/Vent.js","components/spriteButton/SpriteButton.js","components/powerButton/PowerButton.js","components/pokedex/Pokedex.js","serviceWorker.js","index.js"],"names":["convertStringToSentenceCase","str","strArr","split","returnStr","i","length","strIteration","charAt","toUpperCase","slice","MicLight","className","Sprite","props","spriteUrl","spriteKey","activeSprite","alt","src","NumberDisplay","number","name","numberString","typeColour","normal","fighting","flying","poison","ground","rock","bug","ghost","steel","fire","water","grass","electric","psychic","ice","dragon","dark","fairy","TypeDisplay","type","background","style","backgroundColor","SecondaryDisplay","flavourText","statistics","heightWeight","activeDisplay","map","val","key","value","height","weight","DirectionalPad","upAction","rightAction","downAction","leftAction","handleKeyPress","role","onClick","onKeyDown","aria-label","tabIndex","IndicatorLight","colour","GridButton","screen","clickHandler","ConfirmButton","SlimButton","noMargin","marginRight","defaultProps","Vent","SpriteButton","PowerButton","spriteRefObj","0","1","2","3","Pokedex","state","pokemonApiUrl","pokemonSpeciesUrl","cryUrl","pokedexNumber","pokemonData","pokemonSpeciesData","dataReady","language","version","activeSecondaryDisplay","cache","onNextPokemonClick","nextPokedexNumber","setState","getData","onPrevPokemonClick","prevPokedexNumber","onNextSpriteClick","nextSpriteNumber","onPrevSpriteClick","prevSpriteNumber","onGridButtonClick","this","id","pokedexNumberToGet","cacheEntry","pokemonDataPromise","axios","get","pokemonSpeciesPromise","Promise","all","then","res","data","speciesData","console","log","typeArr","types","sort","a","b","slot","typeOne","typeTwo","spriteObj","sprites","flavourTextObj","flavor_text_entries","filter","item","displayLeftNumber","displayRightNumber","displayLeftCycle","displayRightCycle","displayTopCycle","displayBottomCycle","statsArr","stats","stat","push","base_stat","heightWeightObj","color","Object","keys","flavor_text","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0b2e4f69.chunk.js","sourcesContent":["const convertStringToSentenceCase = (str) => {\n\tconst strArr = str.split(/[ -]+/);\n\tvar returnStr = '';\n\tfor (let i = 0; i < strArr.length; i++) {\n\t\tvar strIteration = strArr[i];\n\t\tif (strIteration === 'hp') return 'HP';\n\n\t\treturnStr += `${strIteration.charAt(0).toUpperCase()}${strIteration.slice(1)} `;\n\t}\n\n\treturn returnStr.slice(0, -1);\n};\n\nexport default convertStringToSentenceCase;\n","import React from 'react';\nimport '../../styles/app.scss';\n\nconst MicLight = () => {\n\treturn (\n\t\t<div className=\"mic-light-holder\">\n\t\t\t<div className=\"mic-light\" />\n\t\t</div>\n\t);\n};\n\nexport default MicLight;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../../styles/app.scss';\n\nconst Sprite = (props) => {\n\tconst {\n\t\tspriteUrl,\n\t\tspriteKey,\n\t\tactiveSprite,\n\t} = props;\n\n\tif (!activeSprite) return null;\n\n\treturn (\n\t\t<img alt={spriteKey} src={spriteUrl} />\n\t);\n};\n\nSprite.propTypes = {\n\tspriteUrl: PropTypes.string.isRequired,\n\tspriteKey: PropTypes.string.isRequired,\n\tactiveSprite: PropTypes.bool.isRequired,\n};\n\nexport default Sprite;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../../styles/app.scss';\n\nconst NumberDisplay = (props) => {\n\tconst {\n\t\tnumber,\n\t\tname,\n\t} = props;\n\n\tconst numberString = `#${number} ${name}`;\n\n\treturn (\n\t\t<div className=\"number-display-wrapper\">\n\t\t\t<div className=\"number-display\">\n\t\t\t\t{numberString}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nNumberDisplay.propTypes = {\n\tnumber: PropTypes.number.isRequired,\n\tname: PropTypes.string.isRequired,\n};\n\nexport default NumberDisplay;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../../styles/app.scss';\n\n// Type-colour reference object\nconst typeColour = {\n\tnormal: '#A8A878',\n\tfighting: '#C03028',\n\tflying: '#A890F0',\n\tpoison: '#A040A0',\n\tground: '#E0C068',\n\trock: '#B8A038',\n\tbug: '#A8B820',\n\tghost: '#705898',\n\tsteel: '#B8B8D0',\n\tfire: '#F08030',\n\twater: '#6890F0',\n\tgrass: '#78C850',\n\telectric: '#F8D030',\n\tpsychic: '#F85888',\n\tice: '#98D8D8',\n\tdragon: '#7038F8',\n\tdark: '#705848',\n\tfairy: '#EE99AC',\n};\n\nconst TypeDisplay = (props) => {\n\tconst {\n\t\ttype,\n\t} = props;\n\n\t// Use the reference object to get the correct type background\n\tconst background = typeColour[type];\n\n\treturn (\n\t\t<div className=\"type-display\" style={{ backgroundColor: background }}>\n\t\t\t{type[0].toUpperCase() + type.slice(1)}\n\t\t</div>\n\t);\n};\n\nTypeDisplay.propTypes = {\n\ttype: PropTypes.string.isRequired,\n};\n\nexport default TypeDisplay;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../../styles/app.scss';\n\nconst SecondaryDisplay = (props) => {\n\tconst {\n\t\tflavourText,\n\t\tstatistics,\n\t\theightWeight,\n\t\tactiveDisplay,\n\t} = props;\n\n\tswitch (activeDisplay) {\n\t\tcase 'flavourText':\n\t\t\treturn (\n\t\t\t\t<div className=\"secondary-display-wrapper\">\n\t\t\t\t\t{flavourText}\n\t\t\t\t</div>\n\t\t\t);\n\t\tcase 'statistics':\n\t\t\treturn (\n\t\t\t\t<div className=\"secondary-display-wrapper\">\n\t\t\t\t\t{statistics.map((val) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div className=\"statistic-wrapper\" key={val.name}>\n\t\t\t\t\t\t\t\t<div>{val.name}</div>\n\t\t\t\t\t\t\t\t<div>{val.value}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t);\n\t\tcase 'heightWeight':\n\t\t\treturn (\n\t\t\t\t<div className=\"secondary-display-wrapper\">\n\t\t\t\t\t<div className=\"height-weight-wrapper\">\n\t\t\t\t\t\t<div>Height</div>\n\t\t\t\t\t\t<div>{`${heightWeight.height / 10}m`}</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"height-weight-wrapper\">\n\t\t\t\t\t\t<div>Weight</div>\n\t\t\t\t\t\t<div>{`${heightWeight.weight / 10}kg`}</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\tdefault:\n\t\t\treturn null;\n\t}\n};\n\nSecondaryDisplay.propTypes = {\n\tflavourText: PropTypes.string.isRequired,\n\tstatistics: PropTypes.array.isRequired,\n\tactiveDisplay: PropTypes.string.isRequired,\n\theightWeight: PropTypes.object.isRequired,\n};\n\nexport default SecondaryDisplay;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../../styles/app.scss';\n\nconst DirectionalPad = (props) => {\n\tconst {\n\t\tupAction,\n\t\trightAction,\n\t\tdownAction,\n\t\tleftAction,\n\t} = props;\n\n\tconst handleKeyPress = () => {\n\t}\n\n\treturn (\n\t\t<div className=\"dpad-wrapper\">\n\t\t\t<div\n\t\t\t\trole=\"button\"\n\t\t\t\tclassName=\"dpad-btn dpad-up\"\n\t\t\t\tonClick={upAction}\n\t\t\t\tonKeyDown={handleKeyPress}\n\t\t\t\taria-label=\"Previous sprite\"\n\t\t\t\ttabIndex={0}\n\t\t\t/>\n\t\t\t<div\n\t\t\t\trole=\"button\"\n\t\t\t\tclassName=\"dpad-btn dpad-right\"\n\t\t\t\tonClick={rightAction}\n\t\t\t\tonKeyDown={handleKeyPress}\n\t\t\t\taria-label=\"Next Pokemon\"\n\t\t\t\ttabIndex={0}\n\t\t\t/>\n\t\t\t<div\n\t\t\t\trole=\"button\"\n\t\t\t\tclassName=\"dpad-btn dpad-middle\"\n\t\t\t\taria-label=\"No action\"\n\t\t\t>\n\t\t\t\t<div className=\"dpad-middle-finger\" />\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\trole=\"button\"\n\t\t\t\tclassName=\"dpad-btn dpad-down\"\n\t\t\t\tonClick={downAction}\n\t\t\t\tonKeyDown={handleKeyPress}\n\t\t\t\taria-label=\"Next sprite\"\n\t\t\t\ttabIndex={0}\n\t\t\t/>\n\t\t\t<div\n\t\t\t\trole=\"button\"\n\t\t\t\tclassName=\"dpad-btn dpad-left\"\n\t\t\t\tonClick={leftAction}\n\t\t\t\tonKeyDown={handleKeyPress}\n\t\t\t\taria-label=\"Previous Pokemon\"\n\t\t\t\ttabIndex={0}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nDirectionalPad.propTypes = {\n\tupAction: PropTypes.func.isRequired,\n\trightAction: PropTypes.func.isRequired,\n\tdownAction: PropTypes.func.isRequired,\n\tleftAction: PropTypes.func.isRequired,\n};\n\n\nexport default DirectionalPad;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../../styles/app.scss';\n\nconst IndicatorLight = (props) => {\n\tconst {\n\t\tcolour,\n\t} = props;\n\n\treturn (\n\t\t<div className={`indicator-light ${colour}`} />\n\t);\n};\n\nIndicatorLight.propTypes = {\n\tcolour: PropTypes.string.isRequired,\n};\n\nexport default IndicatorLight;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../../styles/app.scss';\n\nconst GridButton = (props) => {\n\tconst {\n\t\tscreen,\n\t\tclickHandler,\n\t} = props;\n\n\tconst onClick = () => {\n\t\tclickHandler(screen);\n\t};\n\n\tconst onKeyDown = () => {\n\t\treturn;\n\t};\n\n\treturn (\n\t\t<div\n\t\t\tclassName=\"grid-button\"\n\t\t\tonClick={onClick}\n\t\t\trole=\"button\"\n\t\t\ttabIndex={0}\n\t\t\taria-label=\"Grid button\"\n\t\t\tonKeyDown={onKeyDown}\n\t\t/>\n\t);\n};\n\nGridButton.propTypes = {\n\tscreen: PropTypes.string.isRequired,\n\tclickHandler: PropTypes.func,\n};\n\nexport default GridButton;\n","import React from 'react';\nimport '../../styles/app.scss';\n\nconst ConfirmButton = () => {\n\treturn (\n\t\t<div\n\t\t\tclassName=\"confirm-button\"\n\t\t/>\n\t);\n};\n\nexport default ConfirmButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../../styles/app.scss';\n\nconst SlimButton = (props) => {\n\tconst {\n\t\tcolour,\n\t\tnoMargin,\n\t} = props;\n\n\treturn (\n\t\t<div\n\t\t\tclassName=\"slim-button\"\n\t\t\tstyle={{\n\t\t\t\tbackgroundColor: colour,\n\t\t\t\tmarginRight: noMargin ? 0 : 15,\n\t\t\t}}\n\t\t/>\n\t);\n};\n\nSlimButton.propTypes = {\n\tcolour: PropTypes.string,\n\tnoMargin: PropTypes.bool,\n};\n\nSlimButton.defaultProps = {\n\tcolour: '#2A2B26',\n\tnoMargin: false,\n};\n\nexport default SlimButton;\n","import React from 'react';\nimport '../../styles/app.scss';\n\nconst Vent = () => {\n\treturn (\n\t\t<div className=\"display-vent\" />\n\t);\n};\n\nexport default Vent;\n","import React from 'react';\nimport '../../styles/app.scss';\n\nconst SpriteButton = () => {\n\treturn (\n\t\t<div className=\"sprite-button\" />\n\t);\n};\n\nexport default SpriteButton;","import React from 'react';\nimport '../../styles/app.scss';\n\nconst PowerButton = () => {\n\treturn (\n\t\t<div className=\"power-button\" />\n\t);\n};\n\nexport default PowerButton;\n","import React from 'react';\n\nimport axios from 'axios';\nimport {Wave} from 'better-react-spinkit';\nimport {FaChevronLeft, FaChevronRight, FaChevronUp, FaChevronDown} from 'react-icons/fa';\n\nimport convertStringToSentenceCase from '../../utils/common';\n\nimport '../../styles/app.scss';\n\nimport MicLight from '../micLight';\nimport Sprite from '../sprite';\nimport NumberDisplay from '../numberDisplay';\nimport TypeDisplay from '../typeDisplay';\nimport SecondaryDisplay from '../secondaryDisplay';\nimport DirectionalPad from '../directionalPad';\nimport IndicatorLight from '../indicatorLight';\nimport GridButton from '../gridButton';\nimport ConfirmButton from '../confirmButton';\nimport SlimButton from '../slimButton';\nimport Vent from '../vent';\nimport SpriteButton from '../spriteButton';\nimport PowerButton from '../powerButton';\n\nvar spriteRefObj = {\n\t0: 'front_default',\n\t1: 'back_default',\n\t2: 'front_shiny',\n\t3: 'back_shiny',\n};\n\nexport default class Pokedex extends React.Component {\n\tstate = {\n\t\tpokemonApiUrl: 'https://pokeapi.co/api/v2/pokemon/',\n\t\tpokemonSpeciesUrl: 'https://pokeapi.co/api/v2/pokemon-species/',\n\t\tcryUrl: '',\n\t\tpokedexNumber: 1,\n\t\tpokemonData: [],\n\t\tpokemonSpeciesData: [],\n\t\tdataReady: false,\n\t\tactiveSprite: 0,\n\t\tlanguage: 'en',\n\t\tversion: 'x',\n\t\tactiveSecondaryDisplay: 'flavourText',\n\t\tcache: {},\n\t};\n\n\tcomponentDidMount() {\n\t\tthis.getData();\n\t}\n\n\tasync getData(id) {\n\t\tconst {\n\t\t\tpokemonApiUrl,\n\t\t\tpokemonSpeciesUrl,\n\t\t\tpokedexNumber,\n\t\t\tcache,\n\t\t} = this.state;\n\n\t\tvar pokemonData = [];\n\t\tvar pokemonSpeciesData = [];\n\t\tvar pokedexNumberToGet = id ? id : pokedexNumber;\n\n\t\tif (cache[pokedexNumberToGet]) {\n\t\t\tconst cacheEntry = cache[pokedexNumberToGet];\n\t\t\tpokemonData = cacheEntry.pokemonData;\n\t\t\tpokemonSpeciesData = cacheEntry.pokemonSpeciesData;\n\t\t} else {\n\t\t\tconst pokemonDataPromise = axios.get(pokemonApiUrl + pokedexNumberToGet);\n\t\t\tconst pokemonSpeciesPromise = axios.get(pokemonSpeciesUrl + pokedexNumberToGet);\n\t\t\tawait Promise.all([pokemonDataPromise, pokemonSpeciesPromise]).then((res) => {\n\t\t\t\tconst data = res[0].data;\n\t\t\t\tconst speciesData = res[1].data;\n\t\t\t\tpokemonData = data;\n\t\t\t\tpokemonSpeciesData = speciesData;\n\t\t\t\tcache[pokedexNumberToGet] = {\n\t\t\t\t\tpokemonData: data,\n\t\t\t\t\tpokemonSpeciesData: speciesData,\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\n\t\tthis.setState({\n\t\t\tpokemonData,\n\t\t\tpokemonSpeciesData,\n\t\t\tactiveSprite: 0, // Always reset back to default image\n\t\t\tdataReady: true, // Remove loading spinner\n\t\t});\n\t}\n\n\t// Click handlers\n\tonNextPokemonClick = () => {\n\t\tconst {\n\t\t\tpokedexNumber,\n\t\t} = this.state;\n\n\t\tconst nextPokedexNumber = pokedexNumber + 1;\n\t\tif (nextPokedexNumber > 807)\n\t\t\treturn;\n\n\t\tthis.setState({\n\t\t\tdataReady: false, // Add loading spinner\n\t\t\tpokedexNumber: nextPokedexNumber, // Update Pokedex number in state\n\t\t\tactiveSecondaryDisplay: 'flavourText',\n\t\t});\n\n\t\tthis.getData(nextPokedexNumber);\n\t}\n\n\tonPrevPokemonClick = () => {\n\t\tconst {\n\t\t\tpokedexNumber,\n\t\t} = this.state;\n\n\t\tconst prevPokedexNumber = pokedexNumber - 1;\n\t\tif (prevPokedexNumber < 1)\n\t\t\treturn;\n\n\t\tthis.setState({\n\t\t\tdataReady: false, // Add loading spinner\n\t\t\tpokedexNumber: prevPokedexNumber, // Update Pokedex number in state\n\t\t\tactiveSecondaryDisplay: 'flavourText',\n\t\t})\n\n\t\tthis.getData(prevPokedexNumber);\n\t}\n\n\tonNextSpriteClick = () => {\n\t\tconst {\n\t\t\tactiveSprite,\n\t\t} = this.state;\n\n\t\tconst nextSpriteNumber = activeSprite + 1;\n\t\tif (nextSpriteNumber > 3) return;\n\n\t\tthis.setState({\n\t\t\tactiveSprite: nextSpriteNumber,\n\t\t});\n\t}\n\n\tonPrevSpriteClick = () => {\n\t\tconst {\n\t\t\tactiveSprite,\n\t\t} = this.state;\n\n\t\tconst prevSpriteNumber = activeSprite - 1;\n\t\tif (prevSpriteNumber < 0) return;\n\n\t\tthis.setState({\n\t\t\tactiveSprite: prevSpriteNumber,\n\t\t});\n\t}\n\n\tonGridButtonClick = (screen) => {\n\t\tif (!screen) return;\n\n\t\tthis.setState({\n\t\t\tactiveSecondaryDisplay: screen,\n\t\t});\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\tpokedexNumber,\n\t\t\tpokemonData,\n\t\t\tpokemonSpeciesData,\n\t\t\tdataReady,\n\t\t\tactiveSprite,\n\t\t\tlanguage,\n\t\t\tversion,\n\t\t\tactiveSecondaryDisplay,\n\t\t} = this.state;\n\n\t\tif (!dataReady)\n\t\t\treturn <Wave />;\n\n\t\tconsole.log(pokemonData);\n\t\tconsole.log(pokemonSpeciesData);\n\n\t\t// Types\n\t\t// Ensure types are in the correct order (primary first)\n\t\tconst typeArr = pokemonData.types.sort((a, b) => {return a.slot - b.slot});\n\t\tconst typeOne = typeArr[0].type.name;\n\t\tconst typeTwo = typeArr[1] ? typeArr[1].type.name : null;\n\n\t\t// Sprites\n\t\tconst spriteObj = pokemonData.sprites;\n\n\t\t// Flavour text (description)\n\t\t// Should return 1 object from flavor_text_entries array once filtered\n\t\tconst flavourTextObj = pokemonSpeciesData.flavor_text_entries.filter(item => item.language.name === language && item.version.name === version)[0];\n\n\t\t// Sprite display\n\t\tconst displayLeftNumber = pokedexNumber - 1;\n\t\tconst displayRightNumber = pokedexNumber + 1;\n\t\tconst displayLeftCycle = displayLeftNumber !== 0;\n\t\tconst displayRightCycle = displayRightNumber !== 807; // End of Alola Pokedex\n\t\tconst displayTopCycle = (activeSprite - 1) >= 0;\n\t\tconst displayBottomCycle = (activeSprite + 1) <= 3;\n\n\t\t// Statistics\n\t\tconst statsArr = pokemonData.stats;\n\t\tvar statistics = [];\n\t\tfor (let i=0; i<statsArr.length; i++)\n\t\t{\n\t\t\tconst stat = statsArr[i];\n\t\t\tstatistics.push({\n\t\t\t\tname: convertStringToSentenceCase(stat.stat.name),\n\t\t\t\tvalue: stat.base_stat,\n\t\t\t});\n\t\t}\n\n\t\t// Height & Weight\n\t\tconst heightWeightObj = {\n\t\t\theight: pokemonData.height,\n\t\t\tweight: pokemonData.weight,\n\t\t};\n\n\t\treturn(\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"left-screen\">\n\t\t\t\t\t<div className=\"left-screen-header\">\n\t\t\t\t\t\t<div className=\"lights-container\">\n\t\t\t\t\t\t\t<MicLight />\n\t\t\t\t\t\t\t<IndicatorLight colour=\"red\" />\n\t\t\t\t\t\t\t<IndicatorLight colour=\"yellow\" />\n\t\t\t\t\t\t\t<IndicatorLight colour=\"green\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"lid-middle\">\n\t\t\t\t\t\t\t<div className=\"lid-diagonal\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"lid-right\">\n\t\t\t\t\t\t\t<div className=\"lid-right-top\" />\n\t\t\t\t\t\t\t<div className=\"lid-right-bottom\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"left-screen-content\">\n\t\t\t\t\t\t<div className=\"main-display-wrapper\">\n\t\t\t\t\t\t\t<div className=\"main-display-cut\" />\n\t\t\t\t\t\t\t<div className=\"sprite-container\">\n\t\t\t\t\t\t\t\t<div className=\"sprite-top\">\n\t\t\t\t\t\t\t\t\t<div className=\"sprite-cycle top\" onClick={this.onPrevSpriteClick}>\n\t\t\t\t\t\t\t\t\t\t{displayTopCycle && \n\t\t\t\t\t\t\t\t\t\t\t<FaChevronUp color=\"#fff\" />\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"sprite-middle\">\n\t\t\t\t\t\t\t\t\t<div className=\"sprite-cycle left\" onClick={this.onPrevPokemonClick}>\n\t\t\t\t\t\t\t\t\t\t{displayLeftCycle &&\n\t\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t\t<FaChevronLeft color=\"#fff\" />\n\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"nav-number-text\">#{displayLeftNumber}</span>\n\t\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"sprite-wrapper\">\n\t\t\t\t\t\t\t\t\t\t{Object.keys(spriteObj).map(function(spriteKey) {\n\t\t\t\t\t\t\t\t\t\t\tconst spriteUrl = spriteObj[spriteKey];\n\t\t\t\t\t\t\t\t\t\t\tif (!spriteUrl) return;\n\n\t\t\t\t\t\t\t\t\t\t\treturn <Sprite spriteUrl={spriteUrl} spriteKey={spriteKey} activeSprite={spriteKey === spriteRefObj[activeSprite]} key={spriteKey} />;\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"sprite-cycle right\" onClick={this.onNextPokemonClick}>\n\t\t\t\t\t\t\t\t\t\t{displayRightCycle &&\n\t\t\t\t\t\t\t\t\t\t\t<FaChevronRight color=\"#fff\" />\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t<span className=\"nav-number-text\">#{displayRightNumber}</span>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"sprite-bottom\">\n\t\t\t\t\t\t\t\t\t<div className=\"sprite-cycle bottom\" onClick={this.onNextSpriteClick}>\n\t\t\t\t\t\t\t\t\t\t{displayBottomCycle && \n\t\t\t\t\t\t\t\t\t\t\t\t<FaChevronDown color=\"#fff\" />\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"main-display-footer\">\n\t\t\t\t\t\t\t\t<SpriteButton />\n\t\t\t\t\t\t\t\t<div className=\"vent-container\">\n\t\t\t\t\t\t\t\t\t<Vent />\n\t\t\t\t\t\t\t\t\t<Vent />\n\t\t\t\t\t\t\t\t\t<Vent />\n\t\t\t\t\t\t\t\t\t<Vent />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"left-screen-footer\">\n\t\t\t\t\t\t\t<div className=\"left-screen-footer-left-col\">\n\t\t\t\t\t\t\t\t<PowerButton />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"left-screen-footer-middle-col\">\n\t\t\t\t\t\t\t\t<div className=\"left-screen-footer-row\">\n\t\t\t\t\t\t\t\t\t<SlimButton colour=\"#D72113\" />\n\t\t\t\t\t\t\t\t\t<SlimButton colour=\"#fff\" noMargin />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"left-screen-footer-row\">\n\t\t\t\t\t\t\t\t\t<NumberDisplay number={pokedexNumber} name={pokemonData.name} />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"left-screen-footer-right-col\">\n\t\t\t\t\t\t\t\t<DirectionalPad\n\t\t\t\t\t\t\t\t\tupAction={this.onPrevSpriteClick}\n\t\t\t\t\t\t\t\t\trightAction={this.onNextPokemonClick}\n\t\t\t\t\t\t\t\t\tdownAction={this.onNextSpriteClick}\n\t\t\t\t\t\t\t\t\tleftAction={this.onPrevPokemonClick}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"hinge-container\">\n\t\t\t\t\t<div className=\"hinge-top\" />\n\t\t\t\t\t<div className=\"hinge-middle\" />\n\t\t\t\t\t<div className=\"hinge-bottom\" />\n\t\t\t\t\t<div className=\"hinge-bottom-lid\" />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"right-screen\">\n\t\t\t\t\t<div className=\"right-lid-top\" />\n\t\t\t\t\t<div className=\"right-lid-wrapper\">\n\t\t\t\t\t\t<div className=\"right-lid-left\">\n\t\t\t\t\t\t\t<div className=\"right-lid-left-box\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"right-lid-middle\">\n\t\t\t\t\t\t\t<div className=\"right-lid-middle-cut\" />\n\t\t\t\t\t\t\t<div className=\"right-lid-middle-diagonal\" />\n\t\t\t\t\t\t</div>\t\t\t\t\t\n\t\t\t\t\t\t<div className=\"right-lid-right\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"right-lid-bottom\">\n\t\t\t\t\t\t<div className=\"right-lid-bottom-left-col\" />\n\t\t\t\t\t\t<div className=\"right-lid-bottom-right-col\" />\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"right-screen-content\">\n\t\t\t\t\t\t<SecondaryDisplay\n\t\t\t\t\t\t\tactiveDisplay={activeSecondaryDisplay}\n\t\t\t\t\t\t\tflavourText={flavourTextObj.flavor_text}\n\t\t\t\t\t\t\tstatistics={statistics}\n\t\t\t\t\t\t\theightWeight={heightWeightObj}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div className=\"grid-button-container\">\n\t\t\t\t\t\t\t<GridButton clickHandler={this.onGridButtonClick} screen=\"flavourText\" />\n\t\t\t\t\t\t\t<GridButton clickHandler={this.onGridButtonClick} screen=\"statistics\" />\n\t\t\t\t\t\t\t<GridButton clickHandler={this.onGridButtonClick} screen=\"heightWeight\" />\n\t\t\t\t\t\t\t<GridButton clickHandler={this.onGridButtonClick} />\n\t\t\t\t\t\t\t<GridButton clickHandler={this.onGridButtonClick} />\n\t\t\t\t\t\t\t<GridButton clickHandler={this.onGridButtonClick} />\n\t\t\t\t\t\t\t<GridButton clickHandler={this.onGridButtonClick} />\n\t\t\t\t\t\t\t<GridButton clickHandler={this.onGridButtonClick} />\n\t\t\t\t\t\t\t<GridButton clickHandler={this.onGridButtonClick} />\n\t\t\t\t\t\t\t<GridButton clickHandler={this.onGridButtonClick} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"misc-button-container\">\n\t\t\t\t\t\t\t<div className=\"misc-button-left-col\">\n\t\t\t\t\t\t\t\t<div className=\"white-grid-button\" />\n\t\t\t\t\t\t\t\t<div className=\"white-grid-button\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"misc-button-right-col\">\n\t\t\t\t\t\t\t\t<div className=\"misc-button-row\">\n\t\t\t\t\t\t\t\t\t<SlimButton />\n\t\t\t\t\t\t\t\t\t<SlimButton noMargin />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"misc-button-row\">\n\t\t\t\t\t\t\t\t\t<ConfirmButton />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"type-display-container\">\n\t\t\t\t\t\t\t<div className=\"type-display-wrapper\">\n\t\t\t\t\t\t\t\t<TypeDisplay type={typeOne} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"type-display-wrapper\">\n\t\t\t\t\t\t\t\t{typeTwo &&\n\t\t\t\t\t\t\t\t\t<TypeDisplay type={typeTwo} />\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Pokedex from './components/pokedex';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Pokedex />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}